require_relative 'board_view'
require_relative 'board'

class BoardController
  def new_player(number)
    placing_board = Board.new
    ship_classes = [Carrier, Battleship, Cruiser, Destroyer, Submarine]
    #hash of ship instances generated by user
    ship_instances = {}
    #introduce the player with a header
    Headers.intro_player(number)
    # entry of ships locations into each ship instance
    ship_classes.each do |ship_class|
      ship = ship_class.new
      ship.size.times do |iteration|
        # print main header
        Headers.main
        # print current player
        Headers.player(number)
        # print positioning header
        Headers.positioning
        #print state of placing board
        BoardView.state(placing_board)
        #print each ship's positioning instructions
        ShipView.positioning_instructions(ship, iteration)
        # save the placing target user inputs
        placing = BoardView.get_target
        # add the placing to the ship locations
        ship.locations << placing
        # use module to convert "A2" to coordinates in the board
        coordinates = Converter.convert(placing)
        # mark the placing target on the placing board
        placing_board.mark_placing(coordinates)
        #print state of placing board
        BoardView.state(placing_board)
      end
      #print positions of this ship
      ShipView.positions(ship)
      # store the new ship with user entered locations
      key = ship.class.to_s.downcase.to_sym
      ship_instances[key] = ship
    end
    # generate board instance with all the ship instances
    new_board = Board.new(ship_instances)
  end

  def play_turn()

  end
end
